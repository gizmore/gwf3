<?php

/**
 * AES crypto utility.
 *
 * @version 7.0.0
 * @since 3.0.1
 * @author gizmore
 */
final class GWF_AES
{

    public const IV = 'MyHomeIsMyCastleIamhungrywhereis'; # <-- 32 chars
    public const CIPHER = 'aes-256-cbc';
    public const KEY_LENGTH = 32;

    /**
     * Encrypt with AES256 in CBC mode. Uses sha256($password) as key. Uses iv or a random IV if not supplied,
     * and prepends to the output.
     * HMAC is appended to the output.
     *
     * This is probably the function you are looking for.
     */
    public static function encrypt(string $data, string $password): string
    {
        $iv_size = openssl_cipher_iv_length(self::CIPHER);
        $iv = openssl_random_pseudo_bytes($iv_size);

        $key = substr(hash('SHA256', $password, true), 0, self::KEY_LENGTH);
        $enc = base64_encode($iv) . ':' . openssl_encrypt($data, self::CIPHER, $key, $options = 0, $iv);
        $hmac = hash_hmac('sha256', $enc, $key);
        return $enc . ':' . $hmac;
    }

    /**
     * Decrypt with AES256 in CBC mode. Uses sha256($password) as key.
     * This function expects $data to be generated by GWF_AES::encrypt.
     *
     * This is probably the function you are looking for.
     *
     * @param string $data
     * @param string $password
     *
     * @return string plaintext
     */
    public static function decrypt(string $data, string $password): string
    {
        list($iv, $ct, $hmac) = explode(':', $data);
        $enc = "$iv:$ct";
        $key = substr(hash('SHA256', $password, true), 0, self::KEY_LENGTH);

        if ($hmac !== hash_hmac('sha256', $enc, $key)) # Only decrypt if cookie has not been tampered
        {
            return false;
        }

        return openssl_decrypt($ct, self::CIPHER, $key, 0, base64_decode($iv));
    }

    /**
     * Encrypt with MCRYPT_RIJNDAEL_256 in mode MCRYPT_MODE_CBC. Uses sha256($iv) as IV.
     * It is recommended to call this with a funny IV.
     * Legacy function using mcrypt.
     *
     * @deprecated unsafe
     */
    public static function encrypt4(string $data, string $key, string $iv): string
    {
        return @mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $data, MCRYPT_MODE_CBC, hash('SHA256', $iv, true));
    }

    /**
     * Decrypt with MCRYPT_RIJNDAEL_256 in mode. Uses sha256($iv) as IV.
     * Legacy function using mcrypt.
     *
     * @param string $data
     * @param string $key
     * @param string $iv
     *
     * @return string data
     * @deprecated unsafe
     */
    public static function decrypt4(string $data, string $key, string $iv): string
    {
        return @mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $data, MCRYPT_MODE_CBC, hash('SHA256', $iv, true));
    }

}
